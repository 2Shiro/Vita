<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.vita.pds.mapper.PdsMapper">  
  	<delete id="deletedPost">
  	   DELETE FROM post
              WHERE
                post_id = #{post_id}
  	</delete>
  
    <insert id="SavePost">
    INSERT INTO post (
    post_id,
    id,
    ptype_id,
    title,
    content,
    state  
) VALUES (
    (SELECT NVL(MAX(post_id), 0) + 1 FROM post),
    #{id},
    1,
    #{title},
    #{content},
    0  
)
    
    </insert>
    <update id="updatePost">
     UPDATE post
    SET title = #{title},
        content = #{content},
        created = SYSDATE
    WHERE post_id = #{post_id}
    </update>
    
    
   <select id="FindPostId">
   SELECT
    P.post_id,
    P.id AS id,
    U.name,
    P.ptype_id,
    P.title,
    P.content,
    P.state,
    P.created,
    COALESCE(H.hit_count, 0) AS hit_count,
    COALESCE(PL.like_count, 0) AS like_count,
    COALESCE(C.comment_count, 0) AS comment_count
FROM
    post P
JOIN
    USERS U ON P.id = U.id
LEFT JOIN
    (SELECT post_id, COUNT(hit_id) AS hit_count FROM HIT GROUP BY post_id) H ON P.post_id = H.post_id
LEFT JOIN
    (SELECT post_id, COUNT(like_id) AS like_count FROM POSTLIKE GROUP BY post_id) PL ON P.post_id = PL.post_id
LEFT JOIN
    (SELECT post_id, COUNT(COMME_ID) AS comment_count FROM COMMENTS GROUP BY post_id) C ON P.post_id = C.post_id
WHERE
    P.post_id = #{post_id}
   
   
   </select>
   
   <select id="FindComments">
   
     SELECT
		    c.comme_id,
		    c.id,
		    c.post_id,
		    c.content,
		    c.created,
		    u.name,
		    COALESCE(l.like_count, 0) AS like_count
	   FROM
		    comments c
	   JOIN 
		    users u ON c.id = u.id
  LEFT JOIN
		    (SELECT
		         comme_id,
		         COUNT(*) AS like_count
		     FROM
		         clike
		     GROUP BY
		         comme_id) l ON c.comme_id = l.comme_id
	   WHERE c.post_id = #{post_id}
	  OFFSET #{offset} ROWS FETCH NEXT #{pageSize} ROWS ONLY
   </select>
   
   <select id ="FindListPost">
   
   	SELECT COUNT(*) AS total_count
      FROM post
   
    
   </select>
   
   <select id="FindListMyPost">
   SELECT COUNT(*) AS total_count
      FROM post
      WHERE post.id =#{id}
   </select>
   
   
   
   <select id="FindAllPostList">
    WITH HitCount AS (
    SELECT post_id, COUNT(hit_id) AS hit_count
    FROM HIT
    GROUP BY post_id
	),
	LikeCount AS (
	    SELECT post_id, COUNT(like_id) AS like_count
	    FROM POSTLIKE
	    GROUP BY post_id
	),
	CommentCount AS (
	    SELECT post_id, COUNT(COMME_ID) AS comment_count
	    FROM COMMENTS
	    GROUP BY post_id
	),
	Read AS (
	    SELECT post_id, MAX(read) AS read
	    FROM hit
	    WHERE id = #{id}
	    GROUP BY post_id
	),
	BookmarkCount AS (
	    SELECT post_id, COUNT(book_id) AS bookmark_count
	    FROM bookmark
	    GROUP BY post_id
	)
	SELECT
	    P.post_id,
	    P.id AS id,
	    U.name,
	    P.ptype_id,
	    P.title,
	    P.content,
	    P.state,
	    P.created,
	    COALESCE(H.hit_count, 0) AS hit_count,
	    COALESCE(PL.like_count, 0) AS like_count,
	    COALESCE(C.comment_count, 0) AS comment_count,
	    COALESCE(IR.read, 0) AS read,
	    COALESCE(B.bookmark_count, 0) AS bookmark_count
	FROM
	    post P
	JOIN
	    USERS U ON P.id = U.id
	LEFT JOIN HitCount H ON P.post_id = H.post_id
	LEFT JOIN LikeCount PL ON P.post_id = PL.post_id
	LEFT JOIN CommentCount C ON P.post_id = C.post_id
	LEFT JOIN Read IR ON P.post_id = IR.post_id
	LEFT JOIN BookmarkCount B ON P.post_id = B.post_id
	ORDER BY P.post_id DESC
	OFFSET #{offset} ROWS FETCH NEXT #{pageSize} ROWS ONLY
   

   </select>
   <select id="FindAllMyPostList">
   WITH HitCount AS (
    SELECT post_id, COUNT(hit_id) AS hit_count
    FROM HIT
    GROUP BY post_id
	),
	LikeCount AS (
	    SELECT post_id, COUNT(like_id) AS like_count
	    FROM POSTLIKE
	    GROUP BY post_id
	),
	CommentCount AS (
	    SELECT post_id, COUNT(COMME_ID) AS comment_count
	    FROM COMMENTS
	    GROUP BY post_id
	),
	Read AS (
	    SELECT post_id, MAX(read) AS read
	    FROM hit
	    WHERE id = #{id}
	    GROUP BY post_id
	),
	BookmarkCount AS (
	    SELECT post_id, COUNT(book_id) AS bookmark_count
	    FROM bookmark
	    GROUP BY post_id
	)
	SELECT
	    P.post_id,
	    P.id AS id,
	    U.name,
	    P.ptype_id,
	    P.title,
	    P.content,
	    P.state,
	    P.created,
	    COALESCE(H.hit_count, 0) AS hit_count,
	    COALESCE(PL.like_count, 0) AS like_count,
	    COALESCE(C.comment_count, 0) AS comment_count,
	    COALESCE(IR.read, 0) AS read,
	    COALESCE(B.bookmark_count, 0) AS bookmark_count
	FROM
	    post P
	JOIN
	    USERS U ON P.id = U.id
	LEFT JOIN HitCount H ON P.post_id = H.post_id
	LEFT JOIN LikeCount PL ON P.post_id = PL.post_id
	LEFT JOIN CommentCount C ON P.post_id = C.post_id
	LEFT JOIN Read IR ON P.post_id = IR.post_id
	LEFT JOIN BookmarkCount B ON P.post_id = B.post_id
	WHERE
	    P.id = #{id}
	ORDER BY
	    P.post_id DESC
	OFFSET #{offset} ROWS FETCH NEXT #{pageSize} ROWS ONLY
   </select>
   
   
   
   
   
   <select id="FindPopulList">
   WITH HitCount AS (
    SELECT post_id, COUNT(hit_id) AS hit_count
    FROM HIT
    GROUP BY post_id
	),
	LikeCount AS (
	    SELECT post_id, COUNT(like_id) AS like_count
	    FROM POSTLIKE
	    GROUP BY post_id
	),
	CommentCount AS (
	    SELECT post_id, COUNT(COMME_ID) AS comment_count
	    FROM COMMENTS
	    GROUP BY post_id
	),
	Read AS (
	    SELECT post_id, MAX(read) AS read
	    FROM hit
	    WHERE id = #{id}
	    GROUP BY post_id
	),
	BookmarkCount AS (
	    SELECT post_id, COUNT(book_id) AS bookmark_count
	    FROM bookmark
	    GROUP BY post_id
	)
	SELECT
	    P.post_id,
	    P.id AS id,
	    U.name,
	    P.ptype_id,
	    P.title,
	    P.content,
	    P.state,
	    P.created,
	    COALESCE(H.hit_count, 0) AS hit_count,
	    COALESCE(PL.like_count, 0) AS like_count,
	    COALESCE(C.comment_count, 0) AS comment_count,
	    COALESCE(IR.read, 0) AS read,
	    COALESCE(B.bookmark_count, 0) AS bookmark_count
	FROM
	    post P
	JOIN
	    USERS U ON P.id = U.id
	LEFT JOIN HitCount H ON P.post_id = H.post_id
	LEFT JOIN LikeCount PL ON P.post_id = PL.post_id
	LEFT JOIN CommentCount C ON P.post_id = C.post_id
	LEFT JOIN Read IR ON P.post_id = IR.post_id
	LEFT JOIN BookmarkCount B ON P.post_id = B.post_id
	ORDER BY CASE WHEN hit_count = 0 THEN 1 ELSE 0 END, hit_count DESC, P.post_id DESC
	OFFSET #{offset} ROWS FETCH NEXT #{pageSize} ROWS ONLY
   </select>
   <select id="FindPostLikeList">
    WITH HitCount AS (
    SELECT post_id, COUNT(hit_id) AS hit_count
    FROM HIT
    GROUP BY post_id
	),
	LikeCount AS (
	    SELECT post_id, COUNT(like_id) AS like_count
	    FROM POSTLIKE
	    GROUP BY post_id
	),
	CommentCount AS (
	    SELECT post_id, COUNT(COMME_ID) AS comment_count
	    FROM COMMENTS
	    GROUP BY post_id
	),
	Read AS (
	    SELECT post_id, MAX(read) AS read
	    FROM hit
	    WHERE id = #{id}
	    GROUP BY post_id
	),
	BookmarkCount AS (
	    SELECT post_id, COUNT(book_id) AS bookmark_count
	    FROM bookmark
	    GROUP BY post_id
	)
	SELECT
	    P.post_id,
	    P.id AS id,
	    U.name,
	    P.ptype_id,
	    P.title,
	    P.content,
	    P.state,
	    P.created,
	    COALESCE(H.hit_count, 0) AS hit_count,
	    COALESCE(PL.like_count, 0) AS like_count,
	    COALESCE(C.comment_count, 0) AS comment_count,
	    COALESCE(IR.read, 0) AS read,
	    COALESCE(B.bookmark_count, 0) AS bookmark_count
	FROM
	    post P
	JOIN
	    USERS U ON P.id = U.id
	LEFT JOIN HitCount H ON P.post_id = H.post_id
	LEFT JOIN LikeCount PL ON P.post_id = PL.post_id
	LEFT JOIN CommentCount C ON P.post_id = C.post_id
	LEFT JOIN Read IR ON P.post_id = IR.post_id
	LEFT JOIN BookmarkCount B ON P.post_id = B.post_id
	ORDER BY CASE WHEN like_count = 0 THEN 1 ELSE 0 END, like_count DESC, P.post_id DESC
	OFFSET #{offset} ROWS FETCH NEXT #{pageSize} ROWS ONLY
   </select>
   <select id="PostReviewList">
   WITH HitCount AS (
    SELECT post_id, COUNT(hit_id) AS hit_count
    FROM HIT
    GROUP BY post_id
	),
	LikeCount AS (
	    SELECT post_id, COUNT(like_id) AS like_count
	    FROM POSTLIKE
	    GROUP BY post_id
	),
	CommentCount AS (
	    SELECT post_id, COUNT(COMME_ID) AS comment_count
	    FROM COMMENTS
	    GROUP BY post_id
	),
	Read AS (
	    SELECT post_id, MAX(read) AS read
	    FROM hit
	    WHERE id = #{id}
	    GROUP BY post_id
	),
	BookmarkCount AS (
	    SELECT post_id, COUNT(book_id) AS bookmark_count
	    FROM bookmark
	    GROUP BY post_id
	)
	SELECT
	    P.post_id,
	    P.id AS id,
	    U.name,
	    P.ptype_id,
	    P.title,
	    P.content,
	    P.state,
	    P.created,
	    COALESCE(H.hit_count, 0) AS hit_count,
	    COALESCE(PL.like_count, 0) AS like_count,
	    COALESCE(C.comment_count, 0) AS comment_count,
	    COALESCE(IR.read, 0) AS read,
	    COALESCE(B.bookmark_count, 0) AS bookmark_count
	FROM
	    post P
	JOIN
	    USERS U ON P.id = U.id
	LEFT JOIN HitCount H ON P.post_id = H.post_id
	LEFT JOIN LikeCount PL ON P.post_id = PL.post_id
	LEFT JOIN CommentCount C ON P.post_id = C.post_id
	LEFT JOIN Read IR ON P.post_id = IR.post_id
	LEFT JOIN BookmarkCount B ON P.post_id = B.post_id
	ORDER BY CASE WHEN comment_count = 0 THEN 1 ELSE 0 END, comment_count DESC, P.post_id DESC
	OFFSET #{offset} ROWS FETCH NEXT #{pageSize} ROWS ONLY
   </select>
   
   <insert id ="saveComment">
   	INSERT INTO comments (
	    comme_id,
	    id,
	    post_id,
	    content
	   
	) VALUES (
	    (SELECT NVL(MAX(comme_id), 0) + 1 FROM comments),
	    #{id},
	    #{post_id},
	    #{content}
	    
	)
  
   
   </insert>
   
   
   
   	<select id="existsLike" >
        SELECT CASE WHEN COUNT(1) > 0 THEN 1 ELSE 0 END
        FROM clike
        WHERE id = #{id}
          AND comme_id = #{comme_id}
    </select>
    <select id="existsPostLike">
    	SELECT CASE WHEN COUNT(1) > 0 THEN 1 ELSE 0 END 
		FROM
		    post p
		JOIN postlike pl ON p.post_id = pl.post_id
		where p.post_id = #{post_id}
		AND pl.id =#{id}
    
    
    </select>
   
   <insert id="saveCommentLike">
   	  INSERT INTO clike (
		    clike_id,
		    id,
		    comme_id
		) VALUES (
		    (SELECT NVL(MAX(clike_id), 0) + 1 FROM clike),
		    #{id},
		    #{comme_id}
		)
   
   </insert>
   
   <insert id="savePostLike">
	  INSERT INTO postlike (
		    like_id,
		    id,
		    post_id
		) VALUES (
		    (SELECT NVL(MAX(like_id), 0) + 1 FROM postlike),
		    #{id},
		    #{post_id}
		)
   </insert>
   
   <select id ="countComment">
	    SELECT
		       count(*)
		  FROM
		       clike
		 where comme_id =#{comme_id}
   </select>
   
   <select id="countPostLike">
	    SELECT
		       count(*)
	      FROM
		       postlike
		 WHERE
		       post_id =#{post_id}
   
   </select>
   <insert id="savePostReport">
   		INSERT INTO report (
		    report_id,
		    post_id,
		    id,
		    reason
		   
		) VALUES (
		    (SELECT NVL(MAX(report_id), 0) + 1 FROM report),
		    #{post_id},
		    #{id},
		    #{reason}
		)
   
   </insert>
   <update id="updatePostState">
	     UPDATE post
			SET
			    state = state + 1
		  WHERE
			        post_id = #{post_id}
			   
   </update>
   
   <insert id="addHit">
   	INSERT INTO hit (
	    hit_id,
	    id,
	    post_id,
	    read
	) VALUES (
	    (SELECT NVL(MAX(hit_id), 0) + 1 FROM hit),
	    #{id},
	    #{post_id},
	    1
	)
   
   </insert>
   
</mapper>

















